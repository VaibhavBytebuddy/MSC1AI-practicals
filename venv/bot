# #!/usr/bin/env python3
# # -*- coding: utf-8 -*-
# """
# Created on Tue Oct 15 10:47:02 2024

# @author: vaibhav
# """

# from chatterbot import ChatBot
# from chatterbot.trainer import chatterBotCorpusTrainer


# buddy=ChatBot("Buddy")

# trainer=chatterBotCorpusTrainer(buddy)
# trainer.train("chatterbot.corpus.english")

# print("hello")

# while True:
#     q=input(">>")
#     print(buddy.get_response(q))



# Function to check if placing a queen at board[row][col] is safe
def is_safe(board, row, col, N):
    # Check this row on left side
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on left side
    for i, j in zip(range(row, N, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

# Function to solve the N-Queens problem using backtracking
def solve_queens(board, col, N):
    # Base case: All queens are placed
    if col >= N:
        return True

    # Try placing this queen in all rows, one by one
    for i in range(N):
        if is_safe(board, i, col, N):
            # Place queen
            board[i][col] = 1

            # Recur to place rest of the queens
            if solve_queens(board, col + 1, N):
                return True

            # If placing queen in board[i][col] doesn't lead to a solution
            # Backtrack: Remove queen from board[i][col]
            board[i][col] = 0

    # If no placement is possible in this column, return False
    return False

# Function to display the board
def print_board(board):
    for row in board:
        print(" ".join(str(x) for x in row))
    print("\n")

# Main function to solve 4-Queens problem
def solve_4_queens():
    N = 4
    board = [[0 for _ in range(N)] for _ in range(N)]

    if solve_queens(board, 0, N):
        print_board(board)
    else:
        print("No solution exists.")

# Run the 4-Queens problem solver
solve_4_queens()